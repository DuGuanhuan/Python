def BinaryTree(r):

    return [r, [], []]

def insertLeft(root,newBranch):

    t = root.pop(1)

    if len(t) > 1:

        root.insert(1,[newBranch,t,[]])

    else:

        root.insert(1,[newBranch, [], []])

    return root

def insertRight(root,newBranch):

    t = root.pop(2)

    if len(t) > 1:

        root.insert(2,[newBranch,[],t])

    else:

        root.insert(2,[newBranch,[],[]])

    return root

def getRootVal(root):

    return root[0]

def setRootVal(root,newVal):

    root[0] = newVal

def getLeftChild(root):

    return root[1]

def getRightChild(root):

    return root[2]


def BinaryTree_str(root):
    if not root:
        return "None <--(None)--> None"

    left = 'None' if not root[1] else getRootVal(root[1])
    right = 'None' if not root[2] else getRootVal(root[2])

    return f"{left} <--({getRootVal(root)})--> {right}"
